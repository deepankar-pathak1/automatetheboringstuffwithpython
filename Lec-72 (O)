# can we derive more than one class from base class?

# multilevel inheritance

# method resolution order

# method overriding

# isinstance(), issubclass()


# <<<<<<<<<<<<# multilevel inheritance>>>>>>>>

# class Phone: # base class/ Parent class
#     def __init__(self,brand,model_name,price):
#         self.brand = brand
#         self.model_name = model_name
#         self._price = max(price,0)
#
#     def full_name(self):
#         return f"{self.brand} {self.model_name}"
#
#     def make_call(self,number):
#         return f"calling {number}"
#
# class Smartphone(Phone): # FROM inheritience concept..# derived class / child class
#     def __init__(self,brand,model_name,price,ram,internal_memory,rear_camera):
#         # two ways
#         # Phone.__init__(self,brand,model_name,price) # uncommon way
#         super().__init__(brand,model_name,price) # common way
#         self.ram = ram
#         self.internal_memory = internal_memory
#         self.rear_camera = rear_camera
#
#
#
# class Smartphone2(Phone): # FROM inheritience concept..# derived class / child class
#     def __init__(self,brand,model_name,price,ram,internal_memory,rear_camera):
#         # two ways
#         # Phone.__init__(self,brand,model_name,price) # uncommon way
#         super().__init__(brand,model_name,price) # common way
#         self.ram = ram
#         self.internal_memory = internal_memory
#         self.rear_camera = rear_camera
#
# # smartphone = Smartphone2('oneplus','5',600,'6GB','64GB','20MP')
# # print(smartphone.full_name())
# # # O/P
# # # oneplus 5
#
# class FlagshipPhone(Smartphone):
#     def __init__(self,brand,model_name,price,ram,internal_memory,rear_camera,front_camera):
#         super().__init__(brand,model_name,price,ram,internal_memory,rear_camera)
#         self.front_camera = front_camera
#
#
# smartphone = Smartphone2('oneplus','5',600,'6GB','64GB','20MP')
# oneplus = FlagshipPhone('oneplus','5',600,'6GB','64GB','20MP','16MP')
# print(oneplus.full_name())



# # method resolution order
#
#
# class Phone: # base class/ Parent class
#     def __init__(self,brand,model_name,price):
#         self.brand = brand
#         self.model_name = model_name
#         self._price = max(price,0)
#
#     def full_name(self):
#         return f"{self.brand} {self.model_name}"
#
#     def make_call(self,number):
#         return f"calling {number}"
#
# class Smartphone(Phone): # FROM inheritience concept..# derived class / child class
#     def __init__(self,brand,model_name,price,ram,internal_memory,rear_camera):
#         # two ways
#         # Phone.__init__(self,brand,model_name,price) # uncommon way
#         super().__init__(brand,model_name,price) # common way
#         self.ram = ram
#         self.internal_memory = internal_memory
#         self.rear_camera = rear_camera
#
#
#
# class Smartphone2(Phone): # FROM inheritience concept..# derived class / child class
#     def __init__(self,brand,model_name,price,ram,internal_memory,rear_camera):
#         # two ways
#         # Phone.__init__(self,brand,model_name,price) # uncommon way
#         super().__init__(brand,model_name,price) # common way
#         self.ram = ram
#         self.internal_memory = internal_memory
#         self.rear_camera = rear_camera
#
# # smartphone = Smartphone2('oneplus','5',600,'6GB','64GB','20MP')
# # print(smartphone.full_name())
# # # O/P
# # # oneplus 5
#
# class FlagshipPhone(Smartphone):
#     def __init__(self,brand,model_name,price,ram,internal_memory,rear_camera,front_camera):
#         super().__init__(brand,model_name,price,ram,internal_memory,rear_camera)
#         self.front_camera = front_camera
#
#
# smartphone = Smartphone2('oneplus','5',600,'6GB','64GB','20MP')
# oneplus = FlagshipPhone('oneplus','5',600,'6GB','64GB','20MP','16MP')
# print(oneplus.full_name())
#
#
# # we use help function to see Method resolution order
#
#
# # print(help(Smartphone))
#
# # class Smartphone(Phone)
# #  |  Smartphone(brand, model_name, price, ram, internal_memory, rear_camera)
# #  |
# #  |  Method resolution order:
# #  |      Smartphone
# #  |      Phone
# #  |      builtins.object
# #  |
# #  |  Methods defined here:
# #  |
# #  |  __init__(self, brand, model_name, price, ram, internal_memory, rear_camera)
# #  |      Initialize self.  See help(type(self)) for accurate signature.
# #  |
# #  |  ----------------------------------------------------------------------
# #  |  Methods inherited from Phone:
# #  |
# #  |  full_name(self)
# #  |
# #  |  make_call(self, number)
# #  |
# #  |  ----------------------------------------------------------------------
# #  |  Data descriptors inherited from Phone:
# #  |
# #  |  __dict__
# #  |      dictionary for instance variables (if defined)
# #  |
# #  |  __weakref__
# #  |      list of weak references to the object (if defined)
# #
# # None
# #
#
# print(oneplus.full_name())
# print(help(FlagshipPhone))




# class FlagshipPhone(Smartphone)
#  |  FlagshipPhone(brand, model_name, price, ram, internal_memory, rear_camera, front_camera)
#  |
#  |  Method resolution order:
#  |      FlagshipPhone
#  |      Smartphone
#  |      Phone
#  |      builtins.object
#  |




# method overriding
#

class Phone: # base class/ Parent class
    def __init__(self,brand,model_name,price):
        self.brand = brand
        self.model_name = model_name
        self._price = max(price,0)

    def full_name(self):
        return f"{self.brand} {self.model_name}"

    def make_call(self,number):
        return f"calling {number}"

class Smartphone(Phone): # FROM inheritience concept..# derived class / child class
    def __init__(self,brand,model_name,price,ram,internal_memory,rear_camera):
        # two ways
        # Phone.__init__(self,brand,model_name,price) # uncommon way
        super().__init__(brand,model_name,price) # common way
        self.ram = ram
        self.internal_memory = internal_memory
        self.rear_camera = rear_camera



class Smartphone2(Phone): # FROM inheritience concept..# derived class / child class
    def __init__(self,brand,model_name,price,ram,internal_memory,rear_camera):
        # two ways
        # Phone.__init__(self,brand,model_name,price) # uncommon way
        super().__init__(brand,model_name,price) # common way
        self.ram = ram
        self.internal_memory = internal_memory
        self.rear_camera = rear_camera
    def full_name(self):
        return f"{self.brand} {self.model_name} and price is {self._price}"

# smartphone = Smartphone2('oneplus','5',600,'6GB','64GB','20MP')
# print(smartphone.full_name())
# # O/P
# # oneplus 5

class FlagshipPhone(Smartphone):
    def __init__(self,brand,model_name,price,ram,internal_memory,rear_camera,front_camera):
        super().__init__(brand,model_name,price,ram,internal_memory,rear_camera)
        self.front_camera = front_camera


oneplus5 = Smartphone2('oneplus','5',600,'6GB','64GB','20MP')
oneplus = FlagshipPhone('oneplus','5',600,'6GB','64GB','20MP','16MP')
# print(oneplus.full_name())
# print(oneplus.full_name())
# print(help(FlagshipPhone))

# class FlagshipPhone(Smartphone)
#  |  FlagshipPhone(brand, model_name, price, ram, internal_memory, rear_camera, front_camera)
#  |
#  |  Method resolution order:
#  |      FlagshipPhone
#  |      Smartphone
#  |      Phone
#  |      builtins.object
#  |
#  |  Methods defined here:
#  |
#  |  __init__(self, brand, model_name, price, ram, internal_memory, rear_camera, front_camera)
#  |      Initialize self.  See help(type(self)) for accurate signature.
#  |
#  |  ----------------------------------------------------------------------
#  |  Methods inherited from Phone:
#  |
#  |  full_name(self)
#  |
#  |  make_call(self, number)
#  |
#  |  ----------------------------------------------------------------------
#  |  Data descriptors inherited from Phone:
#  |
#  |  __dict__
#  |      dictionary for instance variables (if defined)
#  |
#  |  __weakref__
#  |      list of weak references to the object (if defined)

#isinstance

# basicaly instance means object and isinstance is used to check whether this objecy belong to particular class or not
# print(isinstance(oneplus,Phone)) #  True because it is object of phone class


# issubclass
print(issubclass(Smartphone,Phone)) # True
