
# Special magic methods/ dunder methods
# operator overloading
# polymorphism

class Phone:
    def __init__(self,brand,model,price):
        self.brand = brand
        self.model = model
        self.price = price

    def phone_name(self):
        return f"{self.brand} {self.model}"

    # str, repr
    def __str__(self):
        return f"{self.brand} {self.price}"

    def __repr__(self):
        return f"{self.brand} {self.model} {self.price}"

    # special method : add method
    def __add__(self,other):
        return self.price + other.price



# specail magic method / dunder methods are those in which this __ is placed
# at starting and ending ex : (__ init __)
#
# lst= [1,2,3]
# # print(lst)
# my_phone = Phone('nokia','1100',1)
# print(my_phone)

# <__main__.Phone object at 0x000001F1D2EF6FD0>
# as here at output we are getting location where this obeject is present but
# for list we are getting the entire list
# so do same thing with this object we use dunder methods..

# we use .... str, repr

# after using repr..

# my_phone = Phone('nokia','1100',1)
# print(my_phone)
# # nokia 1
#
# print(str(my_phone)) # nokia 1
# print(repr(my_phone)) # nokia 1100 1
#

# basically str is used for normal user
# but repr is used for developers


# method overloading


my_phone = Phone('nokia','1100',1000)
my_phone2 = Phone('nokia','1600',1200)

print(my_phone + my_phone2) # 2200



# polymorphism = many form

# basically operator overloading that we have discussed above is the example of
# polymorphism

# another example of polymorphism is method overidding
